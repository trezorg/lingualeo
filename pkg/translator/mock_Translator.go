// Code generated by mockery v2.43.0. DO NOT EDIT.

package translator

import (
	mock "github.com/stretchr/testify/mock"
	api "github.com/trezorg/lingualeo/pkg/api"
)

// Mock_Translator is an autogenerated mock type for the Translator type
type Mock_Translator struct {
	mock.Mock
}

type Mock_Translator_Expecter struct {
	mock *mock.Mock
}

func (_m *Mock_Translator) EXPECT() *Mock_Translator_Expecter {
	return &Mock_Translator_Expecter{mock: &_m.Mock}
}

// AddWord provides a mock function with given fields: word, translate
func (_m *Mock_Translator) AddWord(word string, translate []string) api.OperationResult {
	ret := _m.Called(word, translate)

	if len(ret) == 0 {
		panic("no return value specified for AddWord")
	}

	var r0 api.OperationResult
	if rf, ok := ret.Get(0).(func(string, []string) api.OperationResult); ok {
		r0 = rf(word, translate)
	} else {
		r0 = ret.Get(0).(api.OperationResult)
	}

	return r0
}

// Mock_Translator_AddWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWord'
type Mock_Translator_AddWord_Call struct {
	*mock.Call
}

// AddWord is a helper method to define mock.On call
//   - word string
//   - translate []string
func (_e *Mock_Translator_Expecter) AddWord(word interface{}, translate interface{}) *Mock_Translator_AddWord_Call {
	return &Mock_Translator_AddWord_Call{Call: _e.mock.On("AddWord", word, translate)}
}

func (_c *Mock_Translator_AddWord_Call) Run(run func(word string, translate []string)) *Mock_Translator_AddWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *Mock_Translator_AddWord_Call) Return(_a0 api.OperationResult) *Mock_Translator_AddWord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mock_Translator_AddWord_Call) RunAndReturn(run func(string, []string) api.OperationResult) *Mock_Translator_AddWord_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateWord provides a mock function with given fields: word
func (_m *Mock_Translator) TranslateWord(word string) api.OperationResult {
	ret := _m.Called(word)

	if len(ret) == 0 {
		panic("no return value specified for TranslateWord")
	}

	var r0 api.OperationResult
	if rf, ok := ret.Get(0).(func(string) api.OperationResult); ok {
		r0 = rf(word)
	} else {
		r0 = ret.Get(0).(api.OperationResult)
	}

	return r0
}

// Mock_Translator_TranslateWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateWord'
type Mock_Translator_TranslateWord_Call struct {
	*mock.Call
}

// TranslateWord is a helper method to define mock.On call
//   - word string
func (_e *Mock_Translator_Expecter) TranslateWord(word interface{}) *Mock_Translator_TranslateWord_Call {
	return &Mock_Translator_TranslateWord_Call{Call: _e.mock.On("TranslateWord", word)}
}

func (_c *Mock_Translator_TranslateWord_Call) Run(run func(word string)) *Mock_Translator_TranslateWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Mock_Translator_TranslateWord_Call) Return(_a0 api.OperationResult) *Mock_Translator_TranslateWord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mock_Translator_TranslateWord_Call) RunAndReturn(run func(string) api.OperationResult) *Mock_Translator_TranslateWord_Call {
	_c.Call.Return(run)
	return _c
}

// NewMock_Translator creates a new instance of Mock_Translator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMock_Translator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mock_Translator {
	mock := &Mock_Translator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
