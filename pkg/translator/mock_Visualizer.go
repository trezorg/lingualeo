// Code generated by mockery v2.43.0. DO NOT EDIT.

package translator

import (
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// Mock_Visualizer is an autogenerated mock type for the Visualizer type
type Mock_Visualizer struct {
	mock.Mock
}

type Mock_Visualizer_Expecter struct {
	mock *mock.Mock
}

func (_m *Mock_Visualizer) EXPECT() *Mock_Visualizer_Expecter {
	return &Mock_Visualizer_Expecter{mock: &_m.Mock}
}

// Show provides a mock function with given fields: u
func (_m *Mock_Visualizer) Show(u *url.URL) error {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*url.URL) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mock_Visualizer_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type Mock_Visualizer_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - u *url.URL
func (_e *Mock_Visualizer_Expecter) Show(u interface{}) *Mock_Visualizer_Show_Call {
	return &Mock_Visualizer_Show_Call{Call: _e.mock.On("Show", u)}
}

func (_c *Mock_Visualizer_Show_Call) Run(run func(u *url.URL)) *Mock_Visualizer_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL))
	})
	return _c
}

func (_c *Mock_Visualizer_Show_Call) Return(_a0 error) *Mock_Visualizer_Show_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mock_Visualizer_Show_Call) RunAndReturn(run func(*url.URL) error) *Mock_Visualizer_Show_Call {
	_c.Call.Return(run)
	return _c
}

// NewMock_Visualizer creates a new instance of Mock_Visualizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMock_Visualizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mock_Visualizer {
	mock := &Mock_Visualizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
